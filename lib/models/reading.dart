import 'package:hive/hive.dart';
import 'package:uuid/uuid.dart';

// part 'reading.g.dart';

@HiveType(typeId: 2)
class Reading extends HiveObject {
  @HiveField(0)
  final String id;

  @HiveField(1)
  final String parameterId;

  @HiveField(2)
  final double value;

  @HiveField(3)
  final DateTime timestamp;

  @HiveField(4)
  final String? notes;

  @HiveField(5)
  final bool synced;

  Reading({
    String? id,
    required this.parameterId,
    required this.value,
    DateTime? timestamp,
    this.notes,
    this.synced = false,
  })  : id = id ?? const Uuid().v4(),
        timestamp = timestamp ?? DateTime.now();

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'parameterId': parameterId,
      'value': value,
      'timestamp': timestamp.millisecondsSinceEpoch,
      'notes': notes,
      'synced': synced,
    };
  }

  factory Reading.fromMap(Map<String, dynamic> map) {
    return Reading(
      id: map['id'],
      parameterId: map['parameterId'],
      value: map['value'],
      timestamp: DateTime.fromMillisecondsSinceEpoch(map['timestamp']),
      notes: map['notes'],
      synced: map['synced'] ?? false,
    );
  }

  Reading copyWith({
    String? id,
    String? parameterId,
    double? value,
    DateTime? timestamp,
    String? notes,
    bool? synced,
  }) {
    return Reading(
      id: id ?? this.id,
      parameterId: parameterId ?? this.parameterId,
      value: value ?? this.value,
      timestamp: timestamp ?? this.timestamp,
      notes: notes ?? this.notes,
      synced: synced ?? this.synced,
    );
  }
}

// This will be generated by build_runner
// part 'reading.g.dart';
class ReadingAdapter extends TypeAdapter<Reading> {
  @override
  final int typeId = 2;

  @override
  Reading read(BinaryReader reader) {
    final numOfFields = reader.readByte();
    final fields = <int, dynamic>{
      for (int i = 0; i < numOfFields; i++) reader.readByte(): reader.read(),
    };
    return Reading(
      id: fields[0] as String,
      parameterId: fields[1] as String,
      value: fields[2] as double,
      timestamp: fields[3] as DateTime,
      notes: fields[4] as String?,
      synced: fields[5] as bool,
    );
  }

  @override
  void write(BinaryWriter writer, Reading obj) {
    writer
      ..writeByte(6)
      ..writeByte(0)
      ..write(obj.id)
      ..writeByte(1)
      ..write(obj.parameterId)
      ..writeByte(2)
      ..write(obj.value)
      ..writeByte(3)
      ..write(obj.timestamp)
      ..writeByte(4)
      ..write(obj.notes)
      ..writeByte(5)
      ..write(obj.synced);
  }

  @override
  int get hashCode => typeId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ReadingAdapter &&
          runtimeType == other.runtimeType &&
          typeId == other.typeId;
}
